// test-functions.js
// ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Firebase Functions ‡πÅ‡∏•‡∏∞‡∏î‡∏π Performance Metrics

const axios = require('axios');

// ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
const BASE_URL = 'http://localhost:5001/daring-calling-827/asia-southeast1';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö getLineAuthUrlHttp
async function testGetLineAuthUrl() {
  console.log('\n=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö getLineAuthUrlHttp ===');
  console.log('‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:', new Date().toLocaleString('th-TH'));
  
  try {
    const startTime = Date.now();
    
    const response = await axios.post(`${BASE_URL}/getLineAuthUrlHttp`, {}, {
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    console.log('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    console.log('‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API:', duration + 'ms');
    console.log('Response Status:', response.status);
    console.log('Response Data:', JSON.stringify(response.data, null, 2));
    
  } catch (error) {
    console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:');
    console.log('Error:', error.message);
    if (error.response) {
      console.log('Status:', error.response.status);
      console.log('Data:', error.response.data);
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö processLineCallbackHttp
async function testProcessLineCallback() {
  console.log('\n=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö processLineCallbackHttp ===');
  console.log('‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:', new Date().toLocaleString('th-TH'));
  
  try {
    const startTime = Date.now();
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≠‡∏°)
    const testData = {
      code: 'test_authorization_code_123',
      state: 'test_state_456'
    };
    
    const response = await axios.post(`${BASE_URL}/processLineCallbackHttp`, testData, {
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    console.log('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    console.log('‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API:', duration + 'ms');
    console.log('Response Status:', response.status);
    console.log('Response Data:', JSON.stringify(response.data, null, 2));
    
  } catch (error) {
    console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≠‡∏°):');
    console.log('Error:', error.message);
    if (error.response) {
      console.log('Status:', error.response.status);
      console.log('Data:', error.response.data);
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π Performance Stats
async function testGetPerformanceStats() {
  console.log('\n=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö getPerformanceStatsHttp ===');
  console.log('‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:', new Date().toLocaleString('th-TH'));
  
  try {
    const startTime = Date.now();
    
    const response = await axios.post(`${BASE_URL}/getPerformanceStatsHttp`, {}, {
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    console.log('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    console.log('‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API:', duration + 'ms');
    console.log('Response Status:', response.status);
    console.log('Performance Stats:', JSON.stringify(response.data, null, 2));
    
  } catch (error) {
    console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:');
    console.log('Error:', error.message);
    if (error.response) {
      console.log('Status:', error.response.status);
      console.log('Data:', error.response.data);
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Reset Performance Metrics
async function testResetPerformanceMetrics() {
  console.log('\n=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö resetPerformanceMetricsHttp ===');
  console.log('‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:', new Date().toLocaleString('th-TH'));
  
  try {
    const startTime = Date.now();
    
    const response = await axios.post(`${BASE_URL}/resetPerformanceMetricsHttp`, {}, {
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    console.log('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    console.log('‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API:', duration + 'ms');
    console.log('Response Status:', response.status);
    console.log('Response Data:', JSON.stringify(response.data, null, 2));
    
  } catch (error) {
    console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:');
    console.log('Error:', error.message);
    if (error.response) {
      console.log('Status:', error.response.status);
      console.log('Data:', error.response.data);
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π performance metrics
async function stressTest() {
  console.log('\n=== Stress Test - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á ===');
  console.log('‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:', new Date().toLocaleString('th-TH'));
  
  const iterations = 5;
  const results = [];
  
  for (let i = 1; i <= iterations; i++) {
    console.log(`\n--- ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${i}/${iterations} ---`);
    
    const startTime = Date.now();
    
    try {
      const response = await axios.post(`${BASE_URL}/getLineAuthUrlHttp`, {}, {
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      const endTime = Date.now();
      const duration = endTime - startTime;
      
      results.push({
        iteration: i,
        success: true,
        duration: duration,
        status: response.status
      });
      
      console.log(`‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡πÄ‡∏ß‡∏•‡∏≤: ${duration}ms`);
      
    } catch (error) {
      const endTime = Date.now();
      const duration = endTime - startTime;
      
      results.push({
        iteration: i,
        success: false,
        duration: duration,
        error: error.message
      });
      
      console.log(`‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡πÄ‡∏ß‡∏•‡∏≤: ${duration}ms - Error: ${error.message}`);
    }
    
    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  console.log('\n=== ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ===');
  const successfulTests = results.filter(r => r.success);
  const failedTests = results.filter(r => !r.success);
  
  console.log(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${results.length}`);
  console.log(`‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successfulTests.length}`);
  console.log(`‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${failedTests.length}`);
  
  if (successfulTests.length > 0) {
    const avgDuration = successfulTests.reduce((sum, r) => sum + r.duration, 0) / successfulTests.length;
    const minDuration = Math.min(...successfulTests.map(r => r.duration));
    const maxDuration = Math.max(...successfulTests.map(r => r.duration));
    
    console.log(`\n‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à):`);
    console.log(`- ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: ${avgDuration.toFixed(2)}ms`);
    console.log(`- ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: ${minDuration}ms`);
    console.log(`- ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ${maxDuration}ms`);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
async function main() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Firebase Functions');
  console.log('=====================================');
  console.log('‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Firebase Emulators ‡∏Å‡πà‡∏≠‡∏ô');
  console.log('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: firebase emulators:start');
  console.log('=====================================');
  
  // ‡∏£‡∏≠‡πÉ‡∏´‡πâ user ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
  console.log('\n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö...');
  await new Promise(resolve => {
    process.stdin.once('data', resolve);
  });
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ
  await testGetLineAuthUrl();
  await testProcessLineCallback();
  await testGetPerformanceStats();
  await stressTest();
  await testResetPerformanceMetrics();
  await testGetPerformanceStats(); // ‡∏î‡∏π stats ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å reset
  
  console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
  console.log('\n‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:');
  console.log('- ‡∏î‡∏π Performance Metrics ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å console logs ‡∏Ç‡∏≠‡∏á emulator');
  console.log('- ‡πÄ‡∏õ‡∏¥‡∏î Emulator UI ‡∏ó‡∏µ‡πà http://localhost:4000 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π logs ‡πÅ‡∏ö‡∏ö real-time');
  console.log('- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:');
  console.log('  === Performance Metrics for functionName ===');
  console.log('  Total Invocations: X');
  console.log('  Execution Time: XXXms');
  console.log('  Memory Used: ~X.XX MB');
  console.log('  Peak Memory: ~XX.XX MB');
  console.log('  Outbound Networking Size: XXX bytes');
  console.log('  ==============================================');
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  testGetLineAuthUrl,
  testProcessLineCallback,
  testGetPerformanceStats,
  testResetPerformanceMetrics,
  stressTest
}; 